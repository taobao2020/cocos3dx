[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION Post-processing examples
	COPYRIGHT	2013-2014, The Brenwill Workshop Ltd. All rights reserved.
[/HEADER]

// Using a texture attached to a rendering surface
[TEXTURES] 
[/TEXTURES]

///////////////////////////////////////////////
// In post-processing, draw a single texture in clip-space.
// after converting the texture to grayscale.
///////////////////////////////////////////////
[EFFECT]
	NAME			Grayscale
 
	VERTEXSHADER	ClipSpace_vsh
	FRAGMENTSHADER	Grayscale_fsh
[/EFFECT]
 
///////////////////////////////////////////////
// In post-processing, draw a single texture in clip-space. after
// converting the texture from integer depth value to a color.
///////////////////////////////////////////////
[EFFECT]
	NAME			Depth
 
	VERTEXSHADER	ClipSpace_vsh
	FRAGMENTSHADER	Depth_fsh
[/EFFECT]

///////////////////////////////////////////////
// Draws a single texture in clip-space.
// In clip-space, we need no transform matrices, because all locations
// are taken to be between +/-1.0 in all three dimensions.
///////////////////////////////////////////////
[VERTEXSHADER]
	NAME 		ClipSpace_vsh
	FILE		CC3ClipSpaceTexturable.vsh
[/VERTEXSHADER]

///////////////////////////////////////////////
// Draws a single texture as grayscale.
// Grayscale rendering is processed via the ITU-R BT.709 conversion used for
// high-definition television (HDTV) signals. The alpha component is unchanged.
///////////////////////////////////////////////
[FRAGMENTSHADER]
	NAME 		Grayscale_fsh

	[GLSL_CODE]
		precision mediump float;
	
		varying lowp vec2 v_texCoord0;
	
		uniform sampler2D s_cc3Texture;
 
		void main (void) {
			vec4 texColor = texture2D(s_cc3Texture, v_texCoord0);
			float luma = (0.2126 * texColor.r) + (0.7152 * texColor.g) + (0.0722 * texColor.b);
			gl_FragColor = vec4(luma, luma, luma, texColor.a);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
///////////////////////////////////////////////
// Draws a single texture, containing depth-buffer values, as grayscale.
// The content in the depth buffer is not linear, so the value of each fragment is
// linearized relative to the near and far clip distances of the camera's frustum,
// whose values are available as standard uniforms.
///////////////////////////////////////////////
[FRAGMENTSHADER]
	NAME 		Depth_fsh
 
	[GLSL_CODE]
		 precision mediump float;
		 
		 varying lowp vec2	v_texCoord0;
		 
		 uniform vec4		u_cc3CameraFrustumDepth;	/**< The depth of the camera frustum (far clip, near clip, -(f+n)/(f-n), -2nf/(f-n)). */
		 uniform sampler2D	s_cc3Texture;

		///////////////////////////
		// Linearizes the specified depth value retrieved from the depth buffer, by converting the
		// buffer value to normalized device coordinates, and then inverting the camera projection.
		//
		// The returned value is specified as a fraction (0 - 1) of the far-clip distance.
		//
		// Given the following values from the camera projection matrix:
		//   - b = -(f+n)/(f-n)		[c3r3 of the projection matrix]
		//   - a = -2nf/(f-n)		[c4r3 of the projection matrix]
		//
		// the z value of a location in eye-space is projected to normalized device coords by the
		// camera projection matrix as follows:
		//   zn = (b*ze + a) / -ze
		//
		// And therefore, the inverse of this, taking the normalized device coordinate to eye-space is:
		//   ze = a / (zn + b)
		//
		// The final distance is then divided by the far clipping distance, to normalize it to a value between 0 & 1.
		///////////////////////////
		float linearizeDepth(float zb){
			float zn = 2.0 * zb - 1.0;								// Normalized device coordinates
			return (u_cc3CameraFrustumDepth.a / (zn + u_cc3CameraFrustumDepth.b)) / u_cc3CameraFrustumDepth.r;
		}

		 void main (void) {
			vec4 texColor = texture2D(s_cc3Texture, v_texCoord0);
			float luma = linearizeDepth(texColor.r);
			gl_FragColor = vec4(luma, luma, luma, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
